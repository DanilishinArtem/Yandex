# Function MakeRange is supportive function which can help to create IteratorRange by template:
    # Head Part:    
        #include <iostream>
        #include <vector>
        #include <string>
        using namespace std;

        template<typename T>
        ostream& operator<<(ostream& out, const vector<T>& v){
            for(const T& item : v){
                out << item << ' ';
            }
            return out;
        }

        template<typename Iterator>
        struct IteratorRange{
            Iterator first, last;

            Iterator begin() const{
                return first;
            }
            Iterator end() const{
                return last;
            }
        };

        template<typename T>
        IteratorRange<typename vector<T>::iterator> Head2(vector<T>& v, int n){
            // for creation of the class IteratorRange we whould use:
            // IteratorRange<typename vector<T>::iterator> iterator;
            n = min(n, static_cast<int>(v.size()));
            return IteratorRange<typename vector<T>::iterator>{v.begin(), v.begin() + n};
        };


        template <typename Iterator>
        IteratorRange<Iterator> MakeRange(Iterator begin, Iterator end){
            return IteratorRange<Iterator>{begin, end};
        }
    # Main Part:
        #include "iterator.h"
        using namespace std;

        int main(){
            vector<int> v = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
            cout << "source vector: " << v << endl;
            for(int& item: Head2(v, 3)){
                item = 0;
            }
            cout << "changed vector for Head2 using: " << v << endl;
            IteratorRange secondHalf = MakeRange(v.begin() + v.size() / 2, v.end());
            cout << "secondHalf: " << endl;
            for(int& item : secondHalf){
                cout << item << ' ';
            }
            cout << endl;
            return 0;
        }

# Alternative:
    template <typename T> struct Widget{
        Widget(T value);
    }

    int main(){
        Widget w_int(5);
        Widget w_char('a');
        return 0;
    }

