Example:
    #include <iostream>
    #include <algorithm>
    #include <vector>

    using namespace std;

    int main(){
        string str = "we a learning c++";
        auto item = begin(str);
        cout << "begin of str: " << *item << endl;
        cout << "next element: " << *next(item++) << endl;
        cout << "whole string output: " << str << endl;
        for(auto item = begin(str); item != end(str); item++){
            cout << *item;
        }
        cout << endl;
        return 0;
    }

Example (for vector):
    #include <iostream>
    #include <algorithm>
    #include <vector>

    using namespace std;

    template <typename T>
    void printRange(T begin, T end){
        for(auto item = begin; item != end; item++){
            cout << *item << " ";
        }
        cout << endl;
    }

    int main(){
        vector<string> langs = {"python", "C++", "C", "Java", "C#"};

        printRange(begin(langs), end(langs));
        printRange(begin(langs[0]), end(langs[0]));
        return 0;
    }

Example (for set):
    int main(){
        set<string> langs = {"python", "C++", "C", "Java", "C#"};
        auto it = find(begin(langs), end(langs), "C++");
        printRange(begin(langs), it);
        printRange(it, end(langs));
        return 0;
    }

Example (for map):
    #include <iostream>
    #include <algorithm>
    #include <map>

    using namespace std;

    ostream&  operator << (ostream& os, const pair<string, int>& s){
        cout << s.first << " " << s.second;
        return os;
    }

    template <typename T>
    void printRange(T begin, T end){
        for(auto item = begin; item != end; item++){
            cout << *item << " ";
        }
        cout << endl;
    }

    int main(){
        map<string, int> langs = {
            {"python", 26},
            {"C++", 34},
            {"C", 45},
            {"Java", 22},
            {"C#", 17}
        };

        auto it = langs.find("C++");
        printRange(langs.begin(), it);
        printRange(it, langs.end());
        return 0;
    }

