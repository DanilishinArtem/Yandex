Example(by using virtual method)

    #include <iostream>
    #include <vector>

    using namespace std;

    class Animal{
    public:
        Animal(const string& type) : type_(type){}
        void Eat(const string& fruit){
            cout << type_ << " eats " << fruit << endl;
        }
        // void Voice() const {}; // this kind of solution doesn't work
        virtual void Voice() const {}; // if we use virtual function, it works
        // То есть здесь мы говорим компилятору, что у классов потомков может быть своя реализация метода "Voice"

    private:
        const string type_;
    };

    class Cat: public Animal {
    public:
        Cat() : Animal("cat"){}
        void Meow() const {
            cout << "meow" << endl;
        }
        // if we change name of method "Voice" to "Sound", it doesn't work because method should override something but it doesn't 
        void Voice() const override{
            cout << "meow" << endl;
        }
    };

    class Dog: public Animal {
    public:
        Dog() : Animal("dog"){}
        void Voice() const override{
            cout << "whaf" << endl;
        }
    };

    class Parrot: public Animal {
    public:
        Parrot(const string& name) : Animal("Parrot"), name_(name){}
        void Voice() const override{
            cout << "Parrot " << name_ << " is good" << endl;
        }
    private:
        const string name_;
    };

    void MakeASound(const Animal& animal){
        animal.Voice();
    }

    int main(){
        Cat cat;
        Dog dog;
        Parrot parrot("Tom");

        MakeASound(cat);
        MakeASound(dog);
        MakeASound(parrot);
        return 0;
    } 