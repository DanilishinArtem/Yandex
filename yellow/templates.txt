Example 1:
    #include <iostream>
    #include <utility>
    #include <map>
    #include <vector>
    using namespace std;

    template<typename T>
    ostream& operator << (ostream& stream, const vector<T>& v){
        for(const auto& item : v){
            stream << item << " ";
        }
        return stream;
    }

    template<typename first, typename second>
    ostream& operator << (ostream& stream, const map<first, second>& m){
        for(const auto& item : m){
            stream << item.first << " , " << item.second << endl;
        }
        return stream;
    }

    int main(){
        vector<int> vi1 = {1,2,3,4,5};
        vector<double> vi2 = {1.1, 2.2, 3.3, 4.4, 5.5};
        map<int, double> m = {{1,3.14}, {3, 5.5}};
        cout << vi1 << endl;
        cout << vi2 << endl;

        cout << m << endl;
        return 0;
    }

Example 2 (Code rafactoring of Example 1):
    #include <iostream>
    #include <utility>
    #include <map>
    #include <vector>
    #include <string>
    #include <sstream>
    using namespace std;

    template<typename collection>
    string Join(const collection& c, char d){
        stringstream ss;
        bool first = true;
        for(const auto& item : c){
            if(!first){
                ss << d;
            }
            first = false;
            ss << item;
        }
        return ss.str();
    }

    template<typename T>
    ostream& operator << (ostream& stream, const vector<T>& v){
        return stream << "{" << Join(v, ',') << "}";
    }

    template<typename first, typename second>
    ostream& operator << (ostream& stream, const pair<first, second>& m){
        return stream << "{" << m.first << "," << m.second << "}";
    }

    template<typename first, typename second>
    ostream& operator << (ostream& stream, const map<first, second>& m){
        return stream << "{" << Join(m, ',') << "}";
    }


    int main(){
        vector<int> vi1 = {1,2,3,4,5};
        vector<double> vi2 = {1.1, 2.2, 3.3, 4.4, 5.5};
        map<int, double> m = {{1,3.14}, {3, 5.5}};
        vector<vector<int>> v = {{1,2}, {3,4}, {5,6}};
        cout << vi1 << endl;
        cout << vi2 << endl;

        cout << m << endl;
        cout << v << endl;
        return 0;
    }

Example3 (defining type of data in the template):
    #include <iostream>
    #include <utility>
    #include <map>
    #include <vector>
    #include <string>
    #include <sstream>
    using namespace std;

    template<typename T>
    T Max(T a, T b){
        if(a < b){
            return b;
        }else{
            return a;
        }
    }

    int main(){
        // cout << Max(3, 5) << endl; // this is works
        // cout << Max(3, 5.5) << endl; // this is not work (because different types of datas)
        // cout << Max<double>(3, 5.5) << endl; // this is works (straight defining type of datas)
        return 0;
    }